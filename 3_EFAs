### EFA ###

############## prep Lifestyle Factors ##############
#######################################################

#Define Factor Scores
factor_scores <- lavPredict(fit3)

#turn into dataframe
factor_scores_df <- as.data.frame(factor_scores)


################# PCA for Lifestyle to determine number of factors ################
####################################################################################
# Inspect NAs because PCA sensitive to it
sum(is.na(factor_scores_df)) # Count NAs #0

# Perform PCA
pca_result_ls <- prcomp(factor_scores_df, center = TRUE, scale. = TRUE)

# Variance explained
explained_ls <- summary(pca_result_ls)$importance[2, ] * 100  # Percent variance
cumulative_explained_ls <- summary(pca_result_ls)$importance[3, ] * 100 # cumulative
latent_ls <- pca_result_ls$sdev^2  # Eigenvalues

# Kaiser criterion (eigenvalue > 1)
nPC_ls <- sum(latent_ls * length(latent_ls) / sum(latent_ls) > 1)
print(nPC_ls)  # returns 5 - But factor 6 has Eigenvalue of 0.977

# Scree plot
fviz_eig(pca_result_ls, addlabels = TRUE)


################# FA for Lifestyle fyi################
#######################################################
'necessary?'
# Test appropriateness
KMO(factor_scores_df)           # Kaiser-Meyer-Olkin measure
cortest.bartlett(cor(factor_scores_df), n = nrow(factor_scores_df))  # Bartlettâ€™s test of sphericity


## 5 Factor solution
# Run factor analysis with 5 factors and varimax rotation
fa_result_5 <- fa(factor_scores_df, nfactors = 5, rotate = "varimax", fm = "ml")

# Print factor loadings
print(fa_result_5, cutoff = 0.1)

# Optional: Plot loadings
fa.diagram(fa_result_5)

##6 Factor solution
# Run factor analysis with 5 factors and varimax rotation
fa_result_6 <- fa(factor_scores_df, nfactors = 6, rotate = "varimax", fm = "ml")

# Print factor loadings
print(fa_result_6, cutoff = 0.1)

# Optional: Plot loadings
fa.diagram(fa_result_6)



############## Presentations ##############
############################################

### Lifestyle
fit_table_efa <- data.frame(
  Measure = c("Chi-square", "Degrees of Freedom", "p-value", "TLI", "RMSEA", "BIC"),
  Value = round(c(fa_result_5$STATISTIC,
                  fa_result_5$dof,
                  fa_result_5$PVAL,
                  fa_result_5$TLI,
                  fa_result_5$RMSEA[1],   # RMSEA estimate is the first value
                  fa_result_5$BIC), 3)
)

kable(fit_table_efa, caption = "EFA Model Fit Indices") %>%
  kable_styling(full_width = FALSE, position = "center")



################# PCA for White Matter ################
#######################################################

# Matrix of WM scores
pca_WM <- num_data[, c( "CCIDmodified", "FA_mean","MSD_mean","MSK_mean","NDI_mean","ODI_mean","Fiso_mean")]
pca_WM <- pca_WM[!pca_WM$CCIDmodified %in% c("222120", "621199"), ]
pca_WMm <- pca_WM %>% select(-CCIDmodified)
fa_wm <- pca_WM %>% select(-CCIDmodified)
## Remove NA
pca_WM_clean <- pca_WMm[complete.cases(pca_WMm) & apply(pca_WMm, 1, function(x) all(is.finite(x))), ]
sum(is.na(pca_WM_clean))# Count NAs #528
nrow(pca_WM_clean) #618 / 90 removed

# Perform PCA
pca_result_wm <- prcomp(pca_WM_clean, center = TRUE, scale. = TRUE)

# Variance explained
explained <- summary(pca_result_wm)$importance[2, ] * 100  # Percent variance #Pretty differnt from Henriques
latent <- pca_result_wm$sdev^2  # Eigenvalues

# Kaiser criterion (eigenvalue > 1)
nPC_wm <- sum(latent * length(latent) / sum(latent) > 1)
print(nPC_wm)  # Should return 3 but returns 2

# Scree plot
fviz_eig(pca_result_wm, addlabels = TRUE)


################# FA for White Matter ##############
####################################################

# Run factor analysis with 3 factors and varimax rotation
fa_result_wm <- fa(fa_wm, nfactors = 3, rotate = "varimax", fm = "ml")

# Print factor loadings
print(fa_result_wm$loadings, cutoff = 0.3)

#Plot loadings
fa.diagram(fa_result_wm)


################# Combine the factor loadings into the data ##############
##########################################################################

# Bind lifestyle factor scores to original data
df_cleanp_scaled <- scale(df_cleanp)
ls_loadings_df <- as.data.frame(fa_result_6$scores)
data_efa_ls <- cbind(df_cleanp_scaled, ls_loadings_df)


#Export WM to Table 
wm_loadings_df <- as.data.frame(fa_result_wm$scores)
colnames(wm_loadings_df) # Change names so ML1 etc are no duplicates when binding dfs
wm_loadings_df$WM1 <- wm_loadings_df$ML1
wm_loadings_df$WM2 <- wm_loadings_df$ML2
wm_loadings_df$WM3 <- wm_loadings_df$ML3
# remove previous columns
wm_loadings_df <- wm_loadings_df %>% select(-ML1, -ML2, -ML3)

# Bind WM factor scores to original data
data_efa_tot <- cbind(data_efa_ls, wm_loadings_df)
