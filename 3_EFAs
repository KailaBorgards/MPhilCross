### EFA ###
table(num_data$v356)

############## EFA for Lifestyle Factors ##############
#######################################################
 
#Factor Scores
factor_scores <- lavPredict(fit3)
#turn into dataframe
factor_scores_df <- as.data.frame(factor_scores)

### Adding CFA factor scores to data frame
data_num_with_LS_sem <- cbind(data_num_with_LS, factor_scores_df)


#Rename
efa_data <- factor_scores_df


# Test appropriateness
KMO(efa_data)           # Kaiser-Meyer-Olkin measure
cortest.bartlett(cor(efa_data), n = nrow(efa_data))  # Bartlettâ€™s test of sphericity

## Determine number of Factors
fa.parallel(efa_data, fa = "fa", n.iter = 100) #3 but only 1 with Eigenvalue >1

# running the EFA
efa_result <- fa(efa_data, nfactors = 6, rotate = "oblimin", fm = "ml")
print(efa_result, cutoff = 0.3)  # Loadings above 0.3
## Best Metrics with 6 factors 
factor_scores <- as.data.frame(efa_result$scores)
head(factor_scores)

#visualize
fa.diagram(efa_result)


#Export to Table
loadings_df <- as.data.frame(efa_result$loadings[1:ncol(efa_data), ])
write.csv(loadings_df, "efa_loadings.csv")


# Bind lifestyle factor scores to original data
num_data_scaled <- scale(num_data)
data_num_with_LS <- cbind(num_data_scaled, factor_scores)


################# PCA for Lifestyle fyi################
#######################################################


# Matrix of LS scores
factor_scores_df

sum(is.na(factor_scores_df))      # Count NAs #0

# Perform PCA
pca_result_ls <- prcomp(factor_scores_df, center = TRUE, scale. = TRUE)

# Variance explained
explained_ls <- summary(pca_result_ls)$importance[2, ] * 100  # Percent variance
latent_ls <- pca_result_ls$sdev^2  # Eigenvalues

# Kaiser criterion (eigenvalue > 1)
nPC_ls <- sum(latent_ls * length(latent_ls) / sum(latent_ls) > 1)
print(nPC_ls)  # returns 5- consider using 6

# Scree plot
fviz_eig(pca_result_ls, addlabels = TRUE)

# Or barplot like in the MATLAB code
barplot(explained_ls, col = "cornflowerblue", main = "Explained Variance", ylab = "% Variance")

## FA
# Run factor analysis with 3 factors and varimax rotation
fa_result_ls <- fa(factor_scores_df, nfactors = nPC_ls, rotate = "varimax", fm = "ml")

# Print factor loadings
print(fa_result_ls$loadings, cutoff = 0.3)

# Optional: Plot loadings
fa.diagram(fa_result_ls)

################# PCA for White Matter ################
#######################################################


# Matrix of WM scores
pca_WM <- num_data[, c("FA_mean","MSD_mean","MSK_mean","NDI_mean","ODI_mean","Fiso_mean")]

sum(is.na(pca_WM_clean))      # Count NAs #528

pca_WM_clean <- pca_WM[complete.cases(pca_WM) & apply(pca_WM, 1, function(x) all(is.finite(x))), ]

nrow(pca_WM_clean) #620 / 88 removed

# Perform PCA
pca_result <- prcomp(pca_WM_clean, center = TRUE, scale. = TRUE)

# Variance explained
explained <- summary(pca_result)$importance[2, ] * 100  # Percent variance
latent <- pca_result$sdev^2  # Eigenvalues

# Kaiser criterion (eigenvalue > 1)
nPC <- sum(latent * length(latent) / sum(latent) > 1)
print(nPC)  # Should return 3 but returns 2

# Scree plot
fviz_eig(pca_result, addlabels = TRUE)

# Or barplot like in the MATLAB code
barplot(explained, col = "cornflowerblue", main = "Explained Variance", ylab = "% Variance")

## FA
# Run factor analysis with 3 factors and varimax rotation
fa_result <- fa(pca_WM_clean, nfactors = 3, rotate = "varimax", fm = "ml")

# Print factor loadings
print(fa_result$loadings, cutoff = 0.3)

# Optional: Plot loadings
fa.diagram(fa_result)

