#### SEM With quadratic LS variables

############ SEM including Age and Sex (and only sig paths from correlation ############
################################################################################

nrow(data_sem_sex)
nrow(WM2sq)
## squared Lifestyle
ML1sq <- poly(data_sem_sex$ML1, 2)
ML1sq <- as.data.frame(ML1sq)
ML1sq$ML1lin <- ML1sq[, "1"]
ML1sq$ML1quad <- ML1sq[, "2"]

ML2sq <- poly(data_sem_sex$ML2, 2)
ML2sq <- as.data.frame(ML2sq)
ML2sq$ML2lin <- ML2sq[, "1"]
ML2sq$ML2quad <- ML2sq[, "2"]

ML3sq <- poly(data_sem_sex$ML3, 2)
ML3sq <- as.data.frame(ML3sq)
ML3sq$ML3lin <- ML3sq[, "1"]
ML3sq$ML3quad <- ML3sq[, "2"]

WM1sq <- poly(data_sem_sex_clean$WM1, 2)
WM1sq <- as.data.frame(WM1sq)
WM1sq$WM1lin <- WM1sq[, "1"]
WM1sq$WM1quad <- WM1sq[, "2"]

WM2sq <- poly(data_sem_sex_clean$WM2, 2)
WM2sq <- as.data.frame(WM2sq)
WM2sq$WM2lin <- WM2sq[, "1"]
WM2sq$WM2quad <- WM2sq[, "2"]

## 
data_sem_poly <- cbind(data_sem_sex, ML1sq, ML2sq, ML3sq, WM1sq, WM2sq)
data_sem_poly <- cbind(data_sem_sex, ML1sq, ML2sq, ML3sq)

## Model Short

#Model
SEM_poly <- '

  # Paths from lifestyle factors to WM
  WM1 ~ a1*ML1lin + a2*ML4 + a3*ML6 + agelin + agequad + sex + a8*ML1quad
  WM2 ~ a4*ML2lin + a5*ML3lin + a6*ML4 + a7*ML6+ agelin + agequad + sex + 
  a9*ML2quad + a10*ML3quad

  # Paths to cognition
  COG ~ b1*WM1 + b2*WM2 +
         c1*ML1lin + c2*ML2lin + c3*ML3lin + c4*ML4 + c5*ML5 + c6 *ML6 +  
         c7 *ML1quad + c8 *ML2quad + c9 *ML3quad+
         agelin + agequad + sex

  # Indirect effects for each ML through WM1
  ind_ML1lin_WM1 := a1 * b1
  ind_ML1quad_WM1 := a8 * b1
  ind_ML4_WM1 := a2 * b1
  ind_ML6_WM1 := a3 * b1

  # Indirect effects for each ML through WM2
  ind_ML2lin_WM2 := a4 * b2
  ind_ML2quad_WM2 := a9 * b2
  ind_ML3lin_WM2 := a10 * b2
  ind_ML3quad_WM2 := a5 * b2
  ind_ML4_WM2 := a6 * b2
  ind_ML6_WM2 := a7 * b2

  # Total indirect effects (WM1 + WM2)
  total_ind_ML4 := ind_ML4_WM1 + ind_ML4_WM2
  total_ind_ML6 := ind_ML6_WM1 + ind_ML6_WM2
 
 
'
SEM_polyfit <- sem(SEM_poly, data = data_sem_poly, std.lv = TRUE)
summary(SEM_polyfit, fit.measures = TRUE, standardized = TRUE, rsquare= TRUE)


#Model
SEM_poly <- '

  # Paths from lifestyle factors to WM
  WM1 ~ a1*ML1 + a2*ML4 + a3*ML6 + agelin + agequad + sex
  WM2 ~ a4*ML2 + a5*ML3 + a6*ML4 + a7*ML6+ agelin + agequad + sex

  # Paths to cognition
  COG ~ b1*WM1 + b2*WM2 +
         c1*ML1 + c2*ML2 + c3*ML3+ c4*ML4 + c5*ML5 + c6 *ML6 + 
         agelin + agequad + sex

  # Indirect effects for each ML through WM1
  ind_ML1_WM1 := a1 * b1
  ind_ML4_WM1 := a2 * b1
  ind_ML6_WM1 := a3 * b1
  
  #Total effect for each ML through WM1
  Total_ML1_WM1 := a1 * b1 + c1
  Total_ML4_WM1 := a2 * b1 + c4
  Total_ML6_WM1 := a3 * b1 + c6
  

  # Indirect effects for each ML through WM2
  ind_ML2_WM2 := a4 * b2
  ind_ML3_WM2 := a5 * b2
  ind_ML4_WM2 := a6 * b2
  ind_ML6_WM2 := a7 * b2

  #Total effect for each ML through WM2
  Total_ML2_WM2 := a4 * b2 + c2
  Total_ML3_WM2 := a5 * b2 + c3
  Total_ML4_WM2 := a6 * b2 + c4
  Total_ML6_WM2 := a7 * b2 + c6

  # Total indirect effects (WM1 + WM2)
  total_ind_ML4 := ind_ML4_WM1 + ind_ML4_WM2
  total_ind_ML6 := ind_ML6_WM1 + ind_ML6_WM2
 
  # Total effects for each ML through both WMs
  TotalWM_ML4 := total_ind_ML4 + c4
  TotalWM_ML6 := total_ind_ML6 + c6
  
  # Proportion mediation
  proportion_mediatedML1WM1 := ind_ML1_WM1 / Total_ML1_WM1
  proportion_mediatedML4WM1 := ind_ML4_WM1 / Total_ML4_WM1
  proportion_mediatedML6WM1 := ind_ML6_WM1 / Total_ML6_WM1
  proportion_mediatedML2WM2 := ind_ML2_WM2 / Total_ML2_WM2
  proportion_mediatedML3WM2 := ind_ML3_WM2 / Total_ML3_WM2
  proportion_mediatedML4WM2 := ind_ML4_WM2 / Total_ML4_WM2
  proportion_mediatedML6WM2 := ind_ML6_WM2 / Total_ML6_WM2
  proportion_mediatedML4WM12 := total_ind_ML4 / TotalWM_ML4
  proportion_mediatedML6WM12 := total_ind_ML6 / TotalWM_ML6
  
 
'
SEM_polyfit <- sem(SEM_poly, data = data_sem_poly, std.lv = TRUE)
summary(SEM_polyfit, fit.measures = TRUE, standardized = TRUE, rsquare= TRUE)



#############################
###### Inspect missings #####
colSums(is.na(data_sem_sex))
sum(!complete.cases(data_sem_sex))
sum(complete.cases(data_sem_sex))

'
Total= 12 * 706 = 8472
Missings (only of 34 included variables): 88+88+48
Sum= 224
Potion of total= 224 / 8472 = 0.0264 = 2.6%
'


#################### Paths #####################
################################################
semPaths(SEM_polyfit, 
         what = "std",        # standardized estimates
         layout = "tree2",     # nice clean tree layout
         edge.label.cex = 1.1, # size of path labels
         sizeMan = 6,          # observed variable size
         sizeLat = 8,          # latent variable size
         nCharNodes = 0,       # show full variable names
         style = "lisrel",     # classic SEM look
         residuals = FALSE,    # hide residual arrows
         intercepts = FALSE)   # hide intercepts

# Saving it
png("sem_plot.png", width = 1000, height = 800)
semPaths(SEM_polyfit, what = "std", layout = "tree", edge.label.cex = 1.1)
dev.off()

#################### Table ####################
################################################

parameterEstimates(SEM_polyfit, standardized = TRUE) %>% 
  filter( op %in% c("~", ":=", "~~")) %>%
  mutate(Significance = case_when(
    pvalue < 0.001 ~ "***",
    pvalue < 0.01 ~ "**",
    pvalue < 0.05 ~ "*",
    TRUE ~ ""
  )) %>%
  select(Predictor = lhs,
         Relationship = op,
         Outcome = rhs, 
         Estimate = est,
         'Std. Est.' = std.all,
         SE = se,
         z = z,
         'p-value' = pvalue,
         Significance) %>%
  kable(format= "html", digits = 3, captio = "SEM Parameter Estimates") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE,
                position = "center")

############## Presentations ##############
############################################

fit_table_poly <- data.frame(
  Measure = c("Chi-square", "Degrees of Freedom", "p-value", "CFI", "TLI", "SRMR", "RMSEA",  "BIC"),
  Value = round(c(
    fitMeasures(SEM_polyfit, "chisq"),
    fitMeasures(SEM_polyfit, "df"),
    fitMeasures(SEM_polyfit, "pvalue"),
    fitMeasures(SEM_polyfit, "CFI"),
    fitMeasures(SEM_polyfit, "TLI"),
    fitMeasures(SEM_polyfit, "SRMR"),
    fitMeasures(SEM_polyfit, "rmsea"),
    fitMeasures(SEM_polyfit, "bic")
  ), 3)
)

kable(fit_table_poly, caption = "SEM Model Fit Indices") %>%
  kable_styling(full_width = FALSE, position = "center")

standardizedSolution(SEM_polyfit)  # or
parameterEstimates(SEM_polyfit, standardized = TRUE)
