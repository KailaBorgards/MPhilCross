## Data
# LS latent factors
head(data_sem_sex)

data_LS_long <- data_sem_sex
head(data_LS_long)
data_LS_long$CCID <- paste0("CC", data_LS_long$CCIDmodified)
data_LS_long <- select(data_LS_long, -CCIDmodified)

# WM delta
head(WM_long)
# Cognition delta
head(merged_cog)

merged_long <- Reduce(function(x, y) merge(x, y, by = "CCID"),
                      list(data_LS_long, WM_long, merged_cog))
head(merged_long)
nrow(merged_long)

############# Compute Latent factors ###########
################################################

### White Matter P5
cogp5_latent <- select(merged_long, C1, C2, C3, C4, )
head(cogp5_latent)


### Cognition P5
## FA
# Run factor analysis with 1 factor for cognition (IQ) and varimax rotation
cog_p5_results <- fa(cogp5_latent, nfactors = 1, rotate = "varimax", fm = "ml")

# Print factor loadings
print(cog_p5_results$loadings, cutoff = 0.3)
mean(cog_p5_results$communality)

#Export to Table
cog_loadings_p5 <- as.data.frame(cog_p5_results$scores)
cog_loadings_p5$COG5 <- cog_loadings_p5$ML1
nrow(cog_loadings_p5)

merged_long$COG5 <- cog_loadings_p5$COG5
merged_long$COGdelta <- merged_long$COG5 - merged_long$COG


### White Matter

wmp5_latent <- select(merged_long, Fiso2_mean, ODI2_mean, NDI2_mean, MK2_mean, MD2_mean, FA2_mean, )

wm_p5_results <- fa(wmp5_latent, nfactors = 3, rotate = "varimax", fm = "ml")

# Print factor loadings
print(wm_p5_results$loadings, cutoff = 0.3)
mean(wm_p5_results$communality)

#Export to Table
wm_loadings_p5 <- as.data.frame(wm_p5_results$scores)
wm_loadings_p5$WM51 <- wm_loadings_p5$ML1
wm_loadings_p5$WM52 <- wm_loadings_p5$ML2
nrow(wm_loadings_p5)

merged_long$WM51 <-  wm_loadings_p5$ML1
merged_long$WM52 <- wm_loadings_p5$ML2
merged_long$WM1delta <- merged_long$WM51 - merged_long$WM1
merged_long$WM2delta <- merged_long$WM52 - merged_long$WM2



reg_LSC1 <- lm(WM2delta ~ ML1 + ML2 + ML3 + ML4 + ML5 + ML6, data = merged_long)
summary(reg_LSC1)

merged_long$pred <- predict(reg_LSC1)

ggplot(merged_long, aes(x = pred, y = WM2delta)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Predicted C1d", y = "Observed C1d",
       title = "Predicted vs Observed Cognition Delta (C1d)") +
  theme_minimal()



####### Correlations

Cor_p5_data <- select(merged_long, ML1, ML2, ML3, ML4, ML5, ML6, WM1delta, WM2delta, COGdelta, )
############### Correlations ###############
############################################

vars <- colnames(Cor_p5_data)
n <- length(vars)

# Empty matrices to store results
cor_mat <- matrix(NA, n, n, dimnames = list(vars, vars))
p_mat <- matrix(NA, n, n, dimnames = list(vars, vars))

# Loop through variable pairs
for (i in 1:n) {
  for (j in i:n) {
    test <- cor.test(cor_data[[i]], cor_data[[j]], method = "pearson")
    cor_mat[i, j] <- test$estimate
    cor_mat[j, i] <- test$estimate
    p_mat[i, j] <- test$p.value
    p_mat[j, i] <- test$p.value
  }
}
## Double check symmetry
all.equal(p_mat, t(p_mat))


#############################
######### Viszualize ########
#############################

#Create a matrix of significance stars
stars_matrix <- ifelse(p_mat < 0.001, "***",
                       ifelse(p_mat < 0.01, "**",
                              ifelse(p_mat < 0.05, "*", "")))

# Melt matrices to long format
corr_melt <- melt(cor_mat)
stars_melt <- melt(stars_matrix)

# Combine into one dataframe
corr_plot_data <- merge(corr_melt, stars_melt, by = c("Var1", "Var2"))
colnames(corr_plot_data) <- c("Var1", "Var2", "Correlation", "Significance")
corr_plot_data <- corr_plot_data[corr_plot_data$Var1 != corr_plot_data$Var2, ]


######## SEM
### just the correlated paths
#Model
SEM_long <- '

  # Paths from lifestyle factors to WM
  WM1delta ~ a1*ML1 + a2*ML2 + a3*ML3  + sex
  WM2delta ~ a9*ML3 + a10*ML4 +  sex

  # Paths to cognition
  COGdelta ~ b1*WM1delta + b2*WM2delta +
         c1*ML1 + c2*ML2 + c3*ML3+ c4*ML4 +
        sex

  # Indirect effects for each ML through WM1
  ind_ML1_WM1 := a1 * b1
  ind_ML2_WM1 := a2 * b1
  ind_ML3_WM1 := a3 * b1
  

  # Indirect effects for each ML through WM2
 
  ind_ML3_WM2 := a9 * b2
  ind_ML4_WM2 := a10 * b2
  

  # Total indirect effects (WM1 + WM2)
  total_ind_ML3 := ind_ML3_WM1 + ind_ML3_WM2

 
'
SEM_long <- sem(SEM_long, data = merged_long, std.lv = TRUE)
summary(SEM_long, fit.measures = TRUE, standardized = TRUE, rsquare= TRUE)




#################### Paths #####################
################################################
semPaths(SEM_long, 
         what = "std",        # standardized estimates
         layout = "tree2",     # nice clean tree layout
         edge.label.cex = 1.1, # size of path labels
         sizeMan = 6,          # observed variable size
         sizeLat = 8,          # latent variable size
         nCharNodes = 0,       # show full variable names
         style = "lisrel",     # classic SEM look
         residuals = FALSE,    # hide residual arrows
         intercepts = FALSE)   # hide intercepts

# Saving it
semPaths(SEM_polyfit, what = "std", layout = "tree", edge.label.cex = 1.1)
dev.off()

#################### Table ####################
################################################

parameterEstimates(SEM_long, standardized = TRUE) %>% 
  filter( op %in% c("~", ":=", "~~")) %>%
  mutate(Significance = case_when(
    pvalue < 0.001 ~ "***",
    pvalue < 0.01 ~ "**",
    pvalue < 0.05 ~ "*",
    TRUE ~ ""
  )) %>%
  select(Predictor = lhs,
         Relationship = op,
         Outcome = rhs, 
         Estimate = est,
         'Std. Est.' = std.all,
         SE = se,
         z = z,
         'p-value' = pvalue,
         Significance) %>%
  kable(format= "html", digits = 3, captio = "SEM Parameter Estimates") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE,
                position = "center")

############## Presentations ##############
############################################

SEM_long_table <- data.frame(
  Measure = c("Chi-square", "Degrees of Freedom", "p-value", "CFI", "TLI", "SRMR", "RMSEA",  "BIC"),
  Value = round(c(
    fitMeasures(SEM_long, "chisq"),
    fitMeasures(SEM_long, "df"),
    fitMeasures(SEM_long, "pvalue"),
    fitMeasures(SEM_long, "CFI"),
    fitMeasures(SEM_long, "TLI"),
    fitMeasures(SEM_long, "SRMR"),
    fitMeasures(SEM_long, "rmsea"),
    fitMeasures(SEM_long, "bic")
  ), 3)
)

kable(SEM_long_table, caption = "SEM Model Fit Indices") %>%
  kable_styling(full_width = FALSE, position = "center")

standardizedSolution(SEM_long)  # or
parameterEstimates(SEM_long, standardized = TRUE)





######## SEM
## Same as in P1

#Model
SEM_long_p1 <- '

  # Paths from lifestyle factors to WM
  WM1delta ~ a1*ML1 + a2*ML4 + a3*ML6  + sex
  WM2delta ~ a4*ML2 + a9*ML3 + a10*ML4 + a7* ML6 +  sex

  # Paths to cognition
  COGdelta ~ b1*WM1delta + b2*WM2delta +
         c1*ML1 + c2*ML2 + c3*ML3+ c4*ML4 + c5*ML5 + c6 *ML6+
        sex

  # Indirect effects for each ML through WM1
  ind_ML1_WM1 := a1 * b1
  ind_ML4_WM1 := a2 * b1
  ind_ML6_WM1 := a3 * b1
  

  # Indirect effects for each ML through WM2
 
  ind_ML2_WM2 := a4 * b2
  ind_ML3_WM2 := a9 * b2
  ind_ML4_WM2 := a10 * b2
  ind_ML6_WM2 := a7 * b2

  # Total indirect effects (WM1 + WM2)
  total_ind_ML4 := ind_ML6_WM1 + ind_ML6_WM2
  total_ind_ML4 := ind_ML6_WM1 + ind_ML6_WM2

 
'
SEM_long_p1f <- sem(SEM_long_p1, data = merged_long, std.lv = TRUE)
summary(SEM_long_p1f, fit.measures = TRUE, standardized = TRUE, rsquare= TRUE)




#################### Paths #####################
################################################
semPaths(SEM_long_p1f, 
         what = "std",        # standardized estimates
         layout = "tree2",     # nice clean tree layout
         edge.label.cex = 1.1, # size of path labels
         sizeMan = 6,          # observed variable size
         sizeLat = 8,          # latent variable size
         nCharNodes = 0,       # show full variable names
         style = "lisrel",     # classic SEM look
         residuals = FALSE,    # hide residual arrows
         intercepts = FALSE)   # hide intercepts

# Saving it
semPaths(SEM_long_p1f, what = "std", layout = "tree", edge.label.cex = 1.1)
dev.off()

#################### Table ####################
################################################

parameterEstimates(SEM_long_p1f, standardized = TRUE) %>% 
  filter( op %in% c("~", ":=", "~~")) %>%
  mutate(Significance = case_when(
    pvalue < 0.001 ~ "***",
    pvalue < 0.01 ~ "**",
    pvalue < 0.05 ~ "*",
    TRUE ~ ""
  )) %>%
  select(Predictor = lhs,
         Relationship = op,
         Outcome = rhs, 
         Estimate = est,
         'Std. Est.' = std.all,
         SE = se,
         z = z,
         'p-value' = pvalue,
         Significance) %>%
  kable(format= "html", digits = 3, captio = "SEM Parameter Estimates") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE,
                position = "center")

############## Presentations ##############
############################################

SEM_long_p1f_table <- data.frame(
  Measure = c("Chi-square", "Degrees of Freedom", "p-value", "CFI", "TLI", "SRMR", "RMSEA",  "BIC"),
  Value = round(c(
    fitMeasures(SEM_long_p1f, "chisq"),
    fitMeasures(SEM_long_p1f, "df"),
    fitMeasures(SEM_long_p1f, "pvalue"),
    fitMeasures(SEM_long_p1f, "CFI"),
    fitMeasures(SEM_long_p1f, "TLI"),
    fitMeasures(SEM_long_p1f, "SRMR"),
    fitMeasures(SEM_long_p1f, "rmsea"),
    fitMeasures(SEM_long_p1f, "bic")
  ), 3)
)

kable(SEM_long_p1f_table, caption = "SEM Model Fit Indices") %>%
  kable_styling(full_width = FALSE, position = "center")

standardizedSolution(SEM_long)  # or
parameterEstimates(SEM_long, standardized = TRUE)


















### correlatio LS to change in COG
# Outcome (Y) predicted by one variable (X)
reg_LSC1 <- lm(C1d ~ ML1 + ML2 + ML3 + ML4 + ML5 + ML6, data = merged_long)
summary(reg_LSC1)
install.packages("ggfortify")
library(ggfortify)

merged_long$pred <- predict(reg_LSC1)

ggplot(merged_long, aes(x = pred, y = C1d)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Predicted C1d", y = "Observed C1d",
       title = "Predicted vs Observed Cognition Delta (C1d)") +
  theme_minimal()


# Outcome (Y) predicted by one variable (X)
reg_LSC2 <- lm(C2d ~ ML1 + ML2 + ML3 + ML4 + ML5 + ML6, data = merged_long)
summary(reg_LSC2)


merged_long$pred2 <- predict(reg_LSC2)

ggplot(merged_long, aes(x = pred2, y = C2d)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Predicted C2d", y = "Observed C2d",
       title = "Predicted vs Observed Cognition Delta (C2d)") +
  theme_minimal()

# Outcome (Y) predicted by one variable (X)
reg_LSC3 <- lm(C3d ~ ML1 + ML2 + ML3 + ML4 + ML5 + ML6, data = merged_long)
summary(reg_LSC3)


merged_long$pred3 <- predict(reg_LSC3)

ggplot(merged_long, aes(x = pred3, y = C3d)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Predicted C3d", y = "Observed C3d",
       title = "Predicted vs Observed Cognition Delta (C3d)") +
  theme_minimal()

# Outcome (Y) predicted by one variable (X)
reg_LSC4 <- lm(C4d ~ ML1 + ML2 + ML3 + ML4 + ML5 + ML6, data = merged_long)
summary(reg_LSC4)


merged_long$pred4 <- predict(reg_LSC4)

ggplot(merged_long, aes(x = pred4, y = C4d)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Predicted C4d", y = "Observed C4d",
       title = "Predicted vs Observed Cognition Delta (C4d)") +
  theme_minimal()











### correlation LS to change in WM


### Correlation in change WM and CS
