########################################################################## CORRELATIONS FOR SEM ################################################################
################################################################################################################################################################

############# Create Dataframe for Correlations ###############
###############################################################

#### Dataframes solely, with the factor loadings
## WM
wm_data <- data_efa_tot %>%
  select(WM1, WM2)

## Lifestyle
ls_data <- data_efa_tot %>%
  select( ML1, ML2, ML3, ML4, ML5, ML6)

## Cognition
cog_data <- cog_loadings_df %>%
  select(COG)

##### Factor Loadings into 1 dataset ####
cor_data  <- cbind(wm_data, cog_data, ls_data)
colnames(cor_data)

sapply(cor_data, class) 

######################## Correlations #########################
###############################################################

vars <- colnames(cor_data)
n <- length(vars)

# Empty matrices to store results
cor_mat <- matrix(NA, n, n, dimnames = list(vars, vars))
p_mat <- matrix(NA, n, n, dimnames = list(vars, vars))

# Loop through variable pairs
for (i in 1:n) {
  for (j in i:n) {
    test <- cor.test(cor_data[[i]], cor_data[[j]], method = "pearson")
    cor_mat[i, j] <- test$estimate
    cor_mat[j, i] <- test$estimate
    p_mat[i, j] <- test$p.value
    p_mat[j, i] <- test$p.value
  }
}
## Double check symmetry
all.equal(p_mat, t(p_mat))


############################# Viszualize #######################
####################### BASIS FOR FIGURE 3 #####################
################################################################

#Create a matrix of significance stars
stars_matrix <- ifelse(p_mat < 0.001, "***",
                       ifelse(p_mat < 0.01, "**",
                              ifelse(p_mat < 0.05, "*", "")))

# Melt matrices to long format
corr_melt <- melt(cor_mat)
stars_melt <- melt(stars_matrix)

# Combine into one dataframe
corr_plot_data <- merge(corr_melt, stars_melt, by = c("Var1", "Var2"))
colnames(corr_plot_data) <- c("Var1", "Var2", "Correlation", "Significance")
corr_plot_data <- corr_plot_data[corr_plot_data$Var1 != corr_plot_data$Var2, ]

# Remove selected pairs
excluded_pairs <- list(
  c("ML1", "ML2"),
  c("ML1", "ML3"),
  c("ML1", "ML4"),
  c("ML1", "ML5"),
  c("ML1", "ML6"),
  c("ML2", "ML3"),
  c("ML2", "ML4"),
  c("ML2", "ML5"),
  c("ML2", "ML6"),
  c("ML3", "ML4"),
  c("ML3", "ML5"),
  c("ML3", "ML6"),
  c("ML4", "ML5"),
  c("ML4", "ML6"),
  c("ML5", "ML6"),
  c("WM2", "WM1"),
  c("ML6", "ML5"),
  c("ML6", "ML4"),
  c("ML6", "ML3"),
  c("ML6", "ML2"),
  c("ML6", "ML1"),
  c("ML5", "ML4"),
  c("ML5", "ML3"),
  c("ML5", "ML2"),
  c("ML5", "ML1"),
  c("ML4", "ML3"),
  c("ML4", "ML2"),
  c("ML4", "ML1"),
  c("ML3", "ML2"),
  c("ML3", "ML1"),
  c("ML2", "ML1"),
  c("WM1", "WM2")
)
corr_plot_data <- corr_plot_data[!mapply(function(v1, v2) {
  any(mapply(function(pair) all(c(v1, v2) == pair), excluded_pairs))
}, corr_plot_data$Var1, corr_plot_data$Var2), ]

# reorder
desired_order <- c("ML6", "ML5", "ML4","ML3","ML2","ML1","WM2","WM1", "COG")
corr_plot_data$Var1 <- factor(corr_plot_data$Var1, levels = desired_order)
corr_plot_data$Var2 <- factor(corr_plot_data$Var2, levels = desired_order)
# Remove diagonal
corr_plot_data <- corr_plot_data[corr_plot_data$Var1 != corr_plot_data$Var2, ]

# Remove lower triangle (keep only upper triangle)
corr_plot_data <- corr_plot_data[
  match(corr_plot_data$Var1, desired_order) <
    match(corr_plot_data$Var2, desired_order), ]

######### FIGURE 3A

# Plot using ggplot2
ggplot(corr_plot_data, aes(x = Var1, y = Var2, fill = Correlation)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "skyblue", mid = "white", high = "hotpink", midpoint = 0,
                       limits = c(-1, 1), name = "r") +
  geom_text(aes(label = paste0(round(Correlation, 2), Significance)), size = 4) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid = element_blank()) +
  labs(title = "Correlation Matrix with Significance", x = "", y = "")


########### Network visualization

# Filter: remove weak or nonsignificant correlations
cor_filtered <- cor_mat
cor_filtered[p_mat > 0.05] <- 0  # threshold example

# Remove self-correlations (diagonal)
diag(cor_filtered) <- 0

# Optional: remove specific variable pairs
cor_filtered["ML1", "ML2"] <- 0
cor_filtered["ML1", "ML3"] <- 0
cor_filtered["ML1", "ML4"] <- 0
cor_filtered["ML1", "ML5"] <- 0
cor_filtered["ML1", "ML6"] <- 0
cor_filtered["ML2", "ML3"] <- 0
cor_filtered["ML2", "ML4"] <- 0
cor_filtered["ML2", "ML5"] <- 0
cor_filtered["ML2", "ML6"] <- 0
cor_filtered["ML3", "ML4"] <- 0
cor_filtered["ML3", "ML5"] <- 0
cor_filtered["ML3", "ML6"] <- 0
cor_filtered["ML4", "ML5"] <- 0
cor_filtered["ML4", "ML6"] <- 0
cor_filtered["ML5", "ML6"] <- 0
cor_filtered["WM2", "WM1"] <- 0
cor_filtered["ML6", "ML5"] <- 0
cor_filtered["ML6", "ML4"] <- 0
cor_filtered["ML6", "ML3"] <- 0
cor_filtered["ML6", "ML2"] <- 0
cor_filtered["ML6", "ML1"] <- 0
cor_filtered["ML5", "ML4"] <- 0
cor_filtered["ML5", "ML3"] <- 0
cor_filtered["ML5", "ML2"] <- 0
cor_filtered["ML5", "ML1"] <- 0
cor_filtered["ML4", "ML3"] <- 0
cor_filtered["ML4", "ML2"] <- 0
cor_filtered["ML4", "ML1"] <- 0
cor_filtered["ML3", "ML2"] <- 0
cor_filtered["ML3", "ML1"] <- 0
cor_filtered["ML2", "ML1"] <- 0
cor_filtered["WM1", "WM2"] <- 0

col_fun = colorRamp2(range(cor_filtered), c("skyblue", "hotpink"), transparency = 0.3)

######### FIGURE 3B

# Create the chord diagram
chordDiagram(
  cor_filtered,
  symmetric = TRUE,
  grid.col = "darkgray", 
  col = col_fun,
  annotationTrack = c("name", "grid")
)


###################################################################### STRUCTURAL EQUATION MODEL ###############################################################
################################################################################################################################################################

#################################### PREP DATA ##########################
#########################################################################

#Prep Age
age <- num_data$Age
age2 <- poly(age, 2)
age2 <- as.data.frame(age2)
age2$agelin <- age2[, "1"]
age2$agequad <- age2[, "2"]
colnames(age2)

#Prep Sex
sex <- num_data %>%
  select( sex, CCIDmodified)
sexc <- sex[!num_data$CCIDmodified %in% c("222120", "621199"), ]
sexc <- sexc[, !(names(sexc) %in% "CCIDmodified")]

## 
data_sem_sex <- cbind(cor_data, age2, sex)

######## SEM including Age and Sex (and only sig paths from correlation ####
###################### BASIS FOR TABLE 2 and FIGURE 4 ######################
############################################################################

#Model
SEM_sex <- '

  # Paths from lifestyle factors to WM
  WM1 ~ a1*ML1 + a2*ML4 + a3*ML6 + agelin + agequad + sex
  WM2 ~ a4*ML2 + a5*ML3 + a6*ML4 + a7*ML6+ agelin + agequad + sex

  # Paths to cognition
  COG ~ b1*WM1 + b2*WM2 +
         c1*ML1 + c2*ML2 + c3*ML3+ c4*ML4 + c5*ML5 + c6 *ML6 + 
         agelin + agequad + sex

  # Indirect effects for each ML through WM1
  ind_ML1_WM1 := a1 * b1
  ind_ML4_WM1 := a2 * b1
  ind_ML6_WM1 := a3 * b1
  
  #Total effect for each ML through WM1
  Total_ML1_WM1 := a1 * b1 + c1
  Total_ML4_WM1 := a2 * b1 + c4
  Total_ML6_WM1 := a3 * b1 + c6
  

  # Indirect effects for each ML through WM2
  ind_ML2_WM2 := a4 * b2
  ind_ML3_WM2 := a5 * b2
  ind_ML4_WM2 := a6 * b2
  ind_ML6_WM2 := a7 * b2

  #Total effect for each ML through WM2
  Total_ML2_WM2 := a4 * b2 + c2
  Total_ML3_WM2 := a5 * b2 + c3
  Total_ML4_WM2 := a6 * b2 + c4
  Total_ML6_WM2 := a7 * b2 + c6

  # Total indirect effects (WM1 + WM2)
  total_ind_ML4 := ind_ML4_WM1 + ind_ML4_WM2
  total_ind_ML6 := ind_ML6_WM1 + ind_ML6_WM2
 
  # Total effects for each ML through both WMs
  TotalWM_ML4 := total_ind_ML4 + c4
  TotalWM_ML6 := total_ind_ML6 + c6
  
  # Proportion mediation
  proportion_mediatedML1WM1 := ind_ML1_WM1 / Total_ML1_WM1
  proportion_mediatedML4WM1 := ind_ML4_WM1 / Total_ML4_WM1
  proportion_mediatedML6WM1 := ind_ML6_WM1 / Total_ML6_WM1
  proportion_mediatedML2WM2 := ind_ML2_WM2 / Total_ML2_WM2
  proportion_mediatedML3WM2 := ind_ML3_WM2 / Total_ML3_WM2
  proportion_mediatedML4WM2 := ind_ML4_WM2 / Total_ML4_WM2
  proportion_mediatedML6WM2 := ind_ML6_WM2 / Total_ML6_WM2
  proportion_mediatedML4WM12 := total_ind_ML4 / TotalWM_ML4
  proportion_mediatedML6WM12 := total_ind_ML6 / TotalWM_ML6
  
 
'
SEM_sexfit <- sem(SEM_sex, data = data_sem_sex, std.lv = TRUE)
summary(SEM_sexfit, fit.measures = TRUE, standardized = TRUE, rsquare= TRUE)




############################# Inspect missings #########################
########################################################################

colSums(is.na(data_sem_sex))
sum(!complete.cases(data_sem_sex))
sum(complete.cases(data_sem_sex))

'
Total= 12 * 706 = 8472
Missings (only of 34 included variables): 88+88+48
Sum= 224
Potion of total= 224 / 8472 = 0.0264 = 2.6%
'


############################## BASIS FOR FIGURE 4 #####################
#######################################################################

semPaths(SEM_sexfit, 
         what = "std",        # standardized estimates
         layout = "tree2",     # nice clean tree layout
         edge.label.cex = 1.1, # size of path labels
         sizeMan = 6,          # observed variable size
         sizeLat = 8,          # latent variable size
         nCharNodes = 0,       # show full variable names
         style = "lisrel",     # classic SEM look
         residuals = FALSE,    # hide residual arrows
         intercepts = FALSE)   # hide intercepts

# Saving it
png("sem_plot.png", width = 1000, height = 800)
semPaths(SEM_sexfit, what = "std", layout = "tree", edge.label.cex = 1.1)
dev.off()

################################### TABLE 2 ############################
########################################################################

parameterEstimates(SEM_sexfit, standardized = TRUE) %>% 
  filter( op %in% c("~", ":=", "~~")) %>%
  mutate(Significance = case_when(
    pvalue < 0.001 ~ "***",
    pvalue < 0.01 ~ "**",
    pvalue < 0.05 ~ "*",
    TRUE ~ ""
  )) %>%
  select(Predictor = lhs,
         Relationship = op,
         Outcome = rhs, 
         Estimate = est,
         'Std. Est.' = std.all,
         SE = se,
         z = z,
         'p-value' = pvalue,
         Significance) %>%
  kable(format= "html", digits = 3, captio = "SEM Parameter Estimates") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE,
                position = "center")

########################## Presentations ###########################
####################################################################

fit_table_sem <- data.frame(
  Measure = c("Chi-square", "Degrees of Freedom", "p-value", "CFI", "TLI", "SRMR", "RMSEA",  "BIC"),
  Value = round(c(
    fitMeasures(SEM_sexfit, "chisq"),
    fitMeasures(SEM_sexfit, "df"),
    fitMeasures(SEM_sexfit, "pvalue"),
    fitMeasures(SEM_sexfit, "CFI"),
    fitMeasures(SEM_sexfit, "TLI"),
    fitMeasures(SEM_sexfit, "SRMR"),
    fitMeasures(SEM_sexfit, "rmsea"),
    fitMeasures(SEM_sexfit, "bic")
  ), 3)
)

kable(fit_table_sem, caption = "SEM Model Fit Indices") %>%
  kable_styling(full_width = FALSE, position = "center")

standardizedSolution(SEM_sexfit)  # or
parameterEstimates(SEM_sexfit, standardized = TRUE)


######################### SEM by without Covariates #########################
############################## BASIS FOR TABLE 2 ############################
#############################################################################

# Model
SEM_nocov <- '

  # Paths from lifestyle factors to WM
  WM1 ~ a1*ML1 + a2*ML4 + a3*ML6 
  WM2 ~ a4*ML2 + a5*ML3 + a6*ML4 + a7*ML6

  # Paths to cognition
  COG ~ b1*WM1 + b2*WM2 +
         c1*ML1 + c2*ML2 + c3*ML3+ c4*ML4 + c5*ML5 + c6 *ML6 

  # Indirect effects for each ML through WM1
  ind_ML1_WM1 := a1 * b1
  ind_ML4_WM1 := a2 * b1
  ind_ML6_WM1 := a3 * b1
  
  #Total effect for each ML through WM1
  Total_ML1_WM1 := a1 * b1 + c1
  Total_ML4_WM1 := a2 * b1 + c4
  Total_ML6_WM1 := a3 * b1 + c6
  

  # Indirect effects for each ML through WM2
  ind_ML2_WM2 := a4 * b2
  ind_ML3_WM2 := a5 * b2
  ind_ML4_WM2 := a6 * b2
  ind_ML6_WM2 := a7 * b2

  #Total effect for each ML through WM2
  Total_ML2_WM2 := a4 * b2 + c2
  Total_ML3_WM2 := a5 * b2 + c3
  Total_ML4_WM2 := a6 * b2 + c4
  Total_ML6_WM2 := a7 * b2 + c6

  # Total indirect effects (WM1 + WM2)
  total_ind_ML4 := ind_ML4_WM1 + ind_ML4_WM2
  total_ind_ML6 := ind_ML6_WM1 + ind_ML6_WM2
 
  # Total effects for each ML through both WMs
  TotalWM_ML4 := total_ind_ML4 + c4
  TotalWM_ML6 := total_ind_ML6 + c6
  
  # Proportion mediation
  proportion_mediatedML1WM1 := ind_ML1_WM1 / Total_ML1_WM1
  proportion_mediatedML4WM1 := ind_ML4_WM1 / Total_ML4_WM1
  proportion_mediatedML6WM1 := ind_ML6_WM1 / Total_ML6_WM1
  proportion_mediatedML2WM2 := ind_ML2_WM2 / Total_ML2_WM2
  proportion_mediatedML3WM2 := ind_ML3_WM2 / Total_ML3_WM2
  proportion_mediatedML4WM2 := ind_ML4_WM2 / Total_ML4_WM2
  proportion_mediatedML6WM2 := ind_ML6_WM2 / Total_ML6_WM2
  proportion_mediatedML4WM12 := total_ind_ML4 / TotalWM_ML4
  proportion_mediatedML6WM12 := total_ind_ML6 / TotalWM_ML6
  
 
'
SEM_nocovfit <- sem(SEM_nocov, data = data_sem_sex, std.lv = TRUE)
summary(SEM_nocovfit, fit.measures = TRUE, standardized = TRUE, rsquare= TRUE)


######################### SEM by different Age Group #########################
##############################################################################

boxplot(age)
table(age)
# compute thirds
thirds <- quantile(age, probs = c(1/3, 2/3))
# Show the cut-off values
thirds
# Cut into thirds based on quantiles
age_group <- cut(age,
                 breaks = c(-Inf, thirds[1], thirds[2], Inf),
                 labels = c("Lower third", "Middle third", "Upper third"))

# Combine into a dataframe to view
age_thirds <- data.frame(age = age, group = age_group)
data_sem_age_thirds <- cbind(cor_data, age_thirds, age2, sex)


## subset into different dataframes
df_lower  <- subset(data_sem_age_thirds, group == "Lower third") # 245
df_middle <- subset(data_sem_age_thirds, group == "Middle third") # 235
df_upper  <- subset(data_sem_age_thirds, group == "Upper third") # 226


## Multigroup SEM for direct effects
SEM_sexfitthirds <- sem(SEM_sex, data = data_sem_age_thirds, std.lv = TRUE, group = "group")
summary(SEM_sexfitthirds, fit.measures = TRUE, standardized = TRUE, rsquare= TRUE)

 
#### multigroup analysis to caputre mediation effects
 ### Group 18- 45
 #Model
 SEMsub45  <- '

  # Paths from lifestyle factors to WM
  WM1 ~ a1*ML1 + a2*ML4 + a3*ML6 + agelin + agequad + sex
  WM2 ~ a4*ML2 + a5*ML3 + a6*ML4 + a7*ML6+ agelin + agequad + sex

  # Paths to cognition
  COG ~ b1*WM1 + b2*WM2 +
         c1*ML1 + c2*ML2 + c3*ML3+ c4*ML4 + c5*ML5 + c6 *ML6 + 
         agelin + agequad + sex

  # Indirect effects for each ML through WM1
  ind_ML1_WM1 := a1 * b1
  ind_ML4_WM1 := a2 * b1
  ind_ML6_WM1 := a3 * b1

  # Indirect effects for each ML through WM2
  ind_ML2_WM2 := a4 * b2
  ind_ML3_WM2 := a5 * b2
  ind_ML4_WM2 := a6 * b2
  ind_ML6_WM2 := a7 * b2


  # Total indirect effects (WM1 + WM2)
  total_ind_ML4 := ind_ML4_WM1 + ind_ML4_WM2
  total_ind_ML6 := ind_ML6_WM1 + ind_ML6_WM2
 
'
SEMsub45fit <- sem(SEMsub45, data = df_lower, std.lv = TRUE)
summary(SEMsub45fit, fit.measures = TRUE, standardized = TRUE)

#Not sig

### Group 46 - 66
SEMsub66  <- '

  # Paths from lifestyle factors to WM
  WM1 ~ a1*ML1 + a2*ML4 + a3*ML6 + agelin + agequad + sex
  WM2 ~ a4*ML2 + a5*ML3 + a6*ML4 + a7*ML6+ agelin + agequad + sex

  # Paths to cognition
  COG ~ b1*WM1 + b2*WM2 +
         c1*ML1 + c2*ML2 + c3*ML3+ c4*ML4 + c5*ML5 + c6 *ML6 + 
         agelin + agequad + sex

  # Indirect effects for each ML through WM1
  ind_ML1_WM1 := a1 * b1
  ind_ML4_WM1 := a2 * b1
  ind_ML6_WM1 := a3 * b1

  # Indirect effects for each ML through WM2
  ind_ML2_WM2 := a4 * b2
  ind_ML3_WM2 := a5 * b2
  ind_ML4_WM2 := a6 * b2
  ind_ML6_WM2 := a7 * b2


  # Total indirect effects (WM1 + WM2)
  total_ind_ML4 := ind_ML4_WM1 + ind_ML4_WM2
  total_ind_ML6 := ind_ML6_WM1 + ind_ML6_WM2
 
'
SEMsub66fit <- sem(SEMsub66, data = df_middle, std.lv = TRUE)
summary(SEMsub66fit, fit.measures = TRUE, standardized = TRUE)

# Not Sig

### Group 66 - 88
SEMsub88  <- '

  # Paths from lifestyle factors to WM
  WM1 ~ a1*ML1 + a2*ML4 + a3*ML6 + agelin + agequad + sex
  WM2 ~ a4*ML2 + a5*ML3 + a6*ML4 + a7*ML6+ agelin + agequad + sex

  # Paths to cognition
  COG ~ b1*WM1 + b2*WM2 +
         c1*ML1 + c2*ML2 + c3*ML3+ c4*ML4 + c5*ML5 + c6 *ML6 + 
         agelin + agequad + sex

  # Indirect effects for each ML through WM1
  ind_ML1_WM1 := a1 * b1
  ind_ML4_WM1 := a2 * b1
  ind_ML6_WM1 := a3 * b1

  # Indirect effects for each ML through WM2
  ind_ML2_WM2 := a4 * b2
  ind_ML3_WM2 := a5 * b2
  ind_ML4_WM2 := a6 * b2
  ind_ML6_WM2 := a7 * b2


  # Total indirect effects (WM1 + WM2)
  total_ind_ML4 := ind_ML4_WM1 + ind_ML4_WM2
  total_ind_ML6 := ind_ML6_WM1 + ind_ML6_WM2
 
'
SEMsub88fit <- sem(SEMsub88, data = df_upper, std.lv = TRUE)
summary(SEMsub88fit, fit.measures = TRUE, standardized = TRUE)

#Not Sig



